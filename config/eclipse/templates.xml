<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="javadoc" deleted="false" description="&lt;b&gt;&lt;/b&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.b_tag" name="&lt;b&gt;">&lt;b&gt;${word_selection}${}&lt;/b&gt;${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;code&gt;&lt;/code&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.code_tag" name="&lt;code&gt;">&lt;code&gt;${word_selection}${}&lt;/code&gt;${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;i&gt;&lt;/i&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.i_tag" name="&lt;i&gt;">&lt;i&gt;${word_selection}${}&lt;/i&gt;${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;pre&gt;&lt;/pre&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.pre_tag" name="&lt;pre&gt;">&lt;pre&gt;${word_selection}${}&lt;/pre&gt;${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="author name" enabled="true" id="org.eclipse.jdt.ui.templates.author" name="@author">@author ${user}</template><template autoinsert="false" context="java" deleted="false" description="dynamic cast" enabled="true" id="org.eclipse.jdt.ui.templates.cast" name="cast">${type} ${new_name} = (${type}) ${name};</template><template autoinsert="false" context="java" deleted="false" description="catch block" enabled="true" id="org.eclipse.jdt.ui.templates.catch" name="catch">catch (${Exception} e) {
	${cursor}// ${todo}: handle exception
}</template><template autoinsert="true" context="java" deleted="false" description="CVS Id comment" enabled="true" name="cvs_comment">/* $$Date$$ */
/* $$RCSfile$$ */
/* $$Author$$ */
/* $$Revision$$ */
</template><template autoinsert="false" context="java" deleted="false" description="do while statement" enabled="true" id="org.eclipse.jdt.ui.templates.do" name="do">do {
	${line_selection}${cursor}
} while (${condition});</template><template autoinsert="true" context="java" deleted="false" description="Expect and return" enabled="true" name="ear">expect(${mock}.${method_call}).andReturn(${return_value});</template><template autoinsert="true" context="java" deleted="false" description="Expect free access to interpreter's accessosrs, of course!" enabled="true" name="efatia">private void expectFreeAccessToInterpretersAccessors() {
    expect(myInterpreter.getDataTypeFilter()).andReturn(myDataTypeFilter).anyTimes();
	expect(myInterpreter.getEnvironment()).andReturn(myEnvironment).anyTimes();
}
</template><template autoinsert="false" context="java" deleted="false" description="else block" enabled="true" id="org.eclipse.jdt.ui.templates.else" name="else">else {
	${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="else if block" enabled="true" id="org.eclipse.jdt.ui.templates.elseif" name="elseif">else if (${condition}) {
	${cursor}
}</template><template autoinsert="true" context="java" deleted="false" description="EasyMock: create local array of mock" enabled="true" name="emclam">${type}[] ${var} = myControl.createMocks(new ${type}[${number}], ${type}.class);${cursor}</template><template autoinsert="true" context="java" deleted="false" description="EasyMock: create local mock" enabled="true" name="emclm">${type} ${var} = myControl.createMock(${type}.class);${cursor}</template><template autoinsert="true" context="java" deleted="false" description="Initialize a mock" enabled="true" name="emim">${variable} = myControl.createMock(${data_type}.class);</template><template autoinsert="true" context="java" deleted="false" description="Adds imports for EasyMock" enabled="true" name="emimport">import static org.easymock.EasyMock.*;
</template><template autoinsert="true" context="java" deleted="false" description="EasyMock replay method" enabled="true" name="emreplay">public void replay() {
  myControl.replay();
}
</template><template autoinsert="true" context="java" deleted="false" description="Creates the basic shell for a test-case class that uses EasyMock" enabled="true" name="emtcc">import static org.easymock.EasyMock.*;
import static org.junit.Assert.*;

import org.norecess.nolatte.support.NoLatteMockControl;
import org.junit.Before;
import org.junit.Test;

public class ${class_under_test}Test {

    private NoLatteMockControl myControl;
	
	private ${class_under_test}	my${class_under_test};

	@Before
	public void setUp() {
        myControl = new NoLatteMockControl();

		my${class_under_test} = new ${class_under_test}();
	}
	
	public void replay() {
		myControl.replay();
	}
	
	public void verify() {
		myControl.verify();
	}
	
	@Test
	public void shouldTestSomething() {
		replay();
		fail("write tests!");
		verify();
	}

}
</template><template autoinsert="true" context="java" deleted="false" description="EasyMock test method" enabled="true" name="emtest">@Test
public void should_${name}()  {
	
	replay();
	${cursor}	
	verify();
}</template><template autoinsert="true" context="java" deleted="false" description="EasyMock verify" enabled="true" name="emverify">public void verify() {
  myControl.verify(${cursor});
}
</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;code&gt;false&lt;/code&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.code_tag_false" name="false">&lt;code&gt;false&lt;/code&gt;</template><template autoinsert="false" context="java" deleted="false" description="iterate over array" enabled="true" id="org.eclipse.jdt.ui.templates.for_array" name="for">for (int ${index} = 0; ${index} &lt; ${array}.length; ${index}++) {
	${line_selection}${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="iterate over array with temporary variable" enabled="true" id="org.eclipse.jdt.ui.templates.for_temp" name="for">for (int ${index} = 0; ${index} &lt; ${array}.length; ${index}++) {
	${array_type} ${array_element} = ${array}[${index}];
	${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="iterate over collection" enabled="true" id="org.eclipse.jdt.ui.templates.for_collection" name="for">for (Iterator ${iterator} = ${collection}.iterator(); ${iterator}.hasNext(); ) {
	${type} ${element} = (${type}) ${iterator}.next();
	${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="iterate over an array or Iterable" enabled="true" id="org.eclipse.jdt.ui.templates.for_iterable" name="foreach">for (${iterable_type} ${iterable_element} : ${iterable}) {
	${cursor}
}</template><template autoinsert="true" context="java" deleted="false" description="GPL Comment" enabled="true" name="gpl_comment">/*
 * Copyright 2007 Jeremy D. Frens
 * 
 * This file is part of the No Latte interpreter.
 * 
 * This code is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This code is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * No Latte; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307 USA
 */

</template><template autoinsert="false" context="java" deleted="false" description="if statement" enabled="true" id="org.eclipse.jdt.ui.templates.if" name="if">if (${condition}) {
	${line_selection}${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="if else statement" enabled="true" id="org.eclipse.jdt.ui.templates.ifelse" name="ifelse">if (${condition}) {
	${cursor}
} else {
	
}</template><template autoinsert="false" context="java" deleted="false" description="dynamic type test and cast" enabled="true" id="org.eclipse.jdt.ui.templates.instanceof" name="instanceof">if (${name} instanceof ${type}) {
	${type} ${new_name} = (${type})${name};
	${cursor}
}</template><template autoinsert="true" context="java" deleted="false" description="Comment which makes VE show the declaration floating on the graphical viewer " enabled="true" id="org.eclipse.ve.java.core.templates.comment.jve-float" name="jve-float">// @jve:decl-index=0:visual-constraint=""</template><template autoinsert="true" context="java" deleted="false" description="Comment which forces VE to model the declaration on this line " enabled="true" id="org.eclipse.ve.java.core.templates.comment.jve-model" name="jve-model">// @jve:decl-index=0:</template><template autoinsert="true" context="java" deleted="false" description="Comment which makes VE show the declaration on the graphical viewer at 100,100 " enabled="true" id="org.eclipse.ve.java.core.templates.comment.jve-xy" name="jve-xy">// @jve:decl-index=0:visual-constraint="100,100${cursor}"</template><template autoinsert="false" context="java" deleted="false" description="lazy creation" enabled="true" id="org.eclipse.jdt.ui.templates.lazy" name="lazy">if (${name} == null) {
	${name} = new ${type}(${arguments});
	${cursor}
}

return ${name};</template><template autoinsert="false" context="java" deleted="false" description="main method" enabled="true" id="org.eclipse.jdt.ui.templates.main" name="main">public static void main(String[] args) {
	${cursor}
}</template><template autoinsert="true" context="java" deleted="false" description="equals() and hashCode() based solely on class" enabled="true" name="myclassequals">@Override
public boolean equals(Object o) {
  return (o != null) &amp;&amp; getClass().equals(o.getClass());
}

@Override
public int hashCode() {
  return ${cursor};
}
</template><template autoinsert="true" context="java" deleted="false" description="Override equals(Object) and hashCode()." enabled="true" name="myequals">@Override
public boolean equals(Object o) {
  return (o != null) &amp;&amp; getClass().equals(o.getClass()) &amp;&amp; equals((${enclosing_type}) o);
}

private boolean equals(${enclosing_type} other) {
  throw new IllegalStateException("unimplemented!");
}

@Override
public int hashCode() {
  throw new IllegalStateException("unimplemented!");
}
</template><template autoinsert="false" context="java" deleted="false" description="create new object" enabled="true" id="org.eclipse.jdt.ui.templates.new" name="new">${type} ${name} = new ${type}(${arguments});</template><template autoinsert="false" context="java" deleted="false" description="non-externalized string marker" enabled="true" id="org.eclipse.jdt.ui.templates.non-nls" name="nls">//$$NON-NLS-${N}$$</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;code&gt;null&lt;/code&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.code_tag_null" name="null">&lt;code&gt;null&lt;/code&gt;</template><template autoinsert="false" context="java" deleted="false" description="private method" enabled="true" id="org.eclipse.jdt.ui.templates.private_method" name="private_method">private ${return_type} ${name}(${}) {
	${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="private static method" enabled="true" id="org.eclipse.jdt.ui.templates.private_static_method" name="private_static_method">private static ${return_type} ${name}(${}) {
	${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="protected method" enabled="true" id="org.eclipse.jdt.ui.templates.protected_method" name="protected_method">protected ${return_type} ${name}(${}) {
	${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="public method" enabled="true" id="org.eclipse.jdt.ui.templates.public_method" name="public_method">public ${return_type} ${name}(${}) {
	${cursor}
}</template><template autoinsert="true" context="java" deleted="false" description="EasyMock reset() method." enabled="true" name="reset">public void reset() {
    EasyMock.reset(${cursor});
}
</template><template autoinsert="false" context="java" deleted="false" description="runnable" enabled="true" id="org.eclipse.jdt.ui.templates.runnable" name="runnable">new Runnable() {
	public void run() {
		${line_selection}
	}
}</template><template autoinsert="true" context="java" deleted="false" description="Add @Before setUp() method" enabled="true" name="setup">@Before
public void setUp() {
    ${cursor}
}
</template><template autoinsert="false" context="java" deleted="false" description="switch case statement" enabled="true" id="org.eclipse.jdt.ui.templates.switch" name="switch">switch (${key}) {
	case ${value}:
		${cursor}
		break;

	default:
		break;
}</template><template autoinsert="false" context="java" deleted="false" description="synchronized block" enabled="true" id="org.eclipse.jdt.ui.templates.synchronized" name="synchronized">synchronized (${mutex}) {
	${line_selection}
}</template><template autoinsert="true" context="java" deleted="false" description="print to standard error" enabled="true" id="org.eclipse.jdt.ui.templates.syserr" name="syserr">System.err.println(${word_selection}${});${cursor}</template><template autoinsert="true" context="java" deleted="false" description="print to standard out" enabled="true" id="org.eclipse.jdt.ui.templates.sysout" name="sysout">System.out.println(${word_selection}${});${cursor}</template><template autoinsert="true" context="java" deleted="false" description="print current method to standard out" enabled="true" id="org.eclipse.jdt.ui.templates.systrace" name="systrace">System.out.println("${enclosing_type}.${enclosing_method}()");</template><template autoinsert="false" context="java" deleted="false" description="test method" enabled="true" id="org.eclipse.jdt.ui.templates.test" name="test">@Test
public void should_${name}()  {
	${cursor} 
}</template><template autoinsert="false" context="java" deleted="false" description="convert collection to array" enabled="true" id="org.eclipse.jdt.ui.templates.toarray" name="toarray">(${type}[]) ${collection}.toArray(new ${type}[${collection}.size()])</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;code&gt;true&lt;/code&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.code_tag_true" name="true">&lt;code&gt;true&lt;/code&gt;</template><template autoinsert="false" context="java" deleted="false" description="try catch block" enabled="true" id="org.eclipse.jdt.ui.templates.try" name="try">try {
	${line_selection}${cursor}
} catch (${Exception} e) {
	// ${todo}: handle exception
}</template><template autoinsert="false" context="java" deleted="false" description="iterate with enumeration" enabled="true" id="org.eclipse.jdt.ui.templates.while_enumeration" name="while">while (${enumeration}.hasMoreElements()) {
	${type} ${element} = (${type}) ${enumeration}.nextElement();
	${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="iterate with iterator" enabled="true" id="org.eclipse.jdt.ui.templates.while_iterator" name="while">while (${iterator}.hasNext()) {
	${type} ${element} = (${type}) ${iterator}.next();
	${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="while loop with condition" enabled="true" id="org.eclipse.jdt.ui.templates.while_condition" name="while">while (${condition}) {
	${line_selection}${cursor}
}</template></templates>