;; -*- mode: Emacs-Lisp -*-

;;You may use this file as specified under the GNU General Public License
;; .gnuemacs file

;; Original author:
;;   Erik Hilsdale (eh@acm.org)
;; Modified heavily for personal use at IU by
;;   Jeremy D. Frens (jdfrens@acm.org)
;; Modified heavily for RedHat Linux at NWC by
;;   Jeremy D. Frens (jdfrens@acm.org)

;; For anyone who would "steal" this file...
;;
;; + This file is loaded by the .emacs file.  This is to allow me to
;;   have different settings for GNU emacs and Xemacs.
;;
;; + Many visual setting for emacs under X Windows are set in
;;   .Xdefaults.  Check that file for my preferred settings.
;;
;; + There are many definitions here that may be of use only to
;;   myself.  I have placed the word "OPTIONAL" (without quotes, in
;;   all caps) in a comment before these definitions.  You're free to
;;   do with them as you want.
;;
;; + There are several things in this file that makes emacs behave
;;   different from the norm.  Turning off C-h as the help hey is
;;   fairly standard since C-h is all too often backsapce, so I
;;   wouldn't worry too much about that.  However, I have instead
;;   mapped M-h to be the help key instead.  I've tried to note these
;;   non-standard changes by the word "NONSTANDARD".  If you use this
;;   file, you may want to take note of these nonstandard changes I've
;;   made so that instructions you read will make sense.
;;
;; + The word "TODO" represents something I still need to do.
;;

;; NONSTANDARD
;; To prevent emacs from immediately dying if I accidentally hit C-x C-c
;; with all of my files saved.
(setq kill-emacs-query-functions
      (cons (lambda () (yes-or-no-p "Really kill Emacs? "))
	    kill-emacs-query-functions))

;; -------- Set the Load Path --------

(add-to-list 'load-path "~/.emacs.d/icicles/")
(add-to-list 'load-path "~/.emacs.d/")

;; -------- ELPA --------

(load "package")
(package-initialize)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("tromey" . "http://tromey.com/elpa/"))

;; -------- ido
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t)

;; -------- Global Defaults and Preferences --------

;; ---- key bindings

(setq function-keymap function-key-map)		; for backwards-compatability

(global-set-key "\C-t" 'tab-to-tab-stop)	; C-T tabs even in lisp mode

;; NONSTANDARD, but incredibly useful
(global-set-key "\C-\\" 'call-last-kbd-macro)

;; NONSTANDARD
;; M-g is by default a useless set-face command.
(global-set-key "\M-g" 'goto-line)

;; ---- general preferences

(setq auto-save-interval 1000)			; don't autosave as often.

(show-paren-mode 1)                             ; how are matching
						; parens indicated?

(setq inhibit-startup-message t)		; don't tell me about emacs.

(setq display-time-day-and-date t)
(display-time)					; display the time on modeline

(fset 'yes-or-no-p (symbol-function 'y-or-n-p))	; y/n, not yes/no

(put 'capitalize-region 'disabled t)		; disable dangerous commands
(put 'downcase-region   'disabled t)
(put 'upcase-region     'disabled t)
(put 'eval-expression   'disabled nil)		; and enable useful ones
(put 'zap-to-char       'disabled nil)

;; death to trailing whitespace!!!
(add-hook 'before-save-hook 'delete-trailing-whitespace)

; indent after hitting return
(define-key global-map (kbd "RET") 'newline-and-indent)

;; -------- Mode Hooks and Program Variables --------

;; OPTIONAL: if you don't use a particular program (like noweb), you
;; can safely remove the settings from that program's section.

; ---- ack

(add-to-list 'load-path "/path/to/full-ack")
(autoload 'ack-same "full-ack" nil t)
(autoload 'ack "full-ack" nil t)
(autoload 'ack-find-same-file "full-ack" nil t)
(autoload 'ack-find-file "full-ack" nil t)

; ---- Man mode

(setq manual-program "/usr/bin/man")

; ---- line numbers
(add-hook 'jdf-code-modes-hook
	  (lambda () (linum-mode 1)))

; ---- CSS mode
(autoload 'css-mode "css-mode")

; ---- Textmate mode

(require 'textmate)
(textmate-mode)

; ---- Text mode

(add-hook 'text-mode-hook
	  (function
	   (lambda ()
	     (auto-fill-mode t)
	     (setq fill-column 70)
	     )))

(setq initial-major-mode 'text-mode)		; start in text mode...

; ---- Matlab
(autoload 'matlab-mode "matlab" "Enter Matlab mode." t)
(defun my-matlab-mode-hook ()
  (setq matlab-function-indent t)
  (setq fill-column 76)
  (turn-on-auto-fill))
(add-hook 'matlab-mode-hook 'my-matlab-mode-hook)

; ---- Markdown
; http://jblevins.org/projects/markdown-mode/
(autoload 'markdown-mode "markdown-mode.el"
  "Major mode for editing Markdown files" t)

;; ---- Ruby
(autoload 'ruby-mode "ruby-mode" "Major mode for editing ruby scripts." t)

(add-hook 'ruby-mode-hook
	  (lambda ()
	    (local-set-key (kbd "RET")
			   'reindent-then-newline-and-indent)))

(add-hook 'ruby-mode-hook
	  (lambda ()
	    (font-lock-add-keywords nil
				    '(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))))

(add-hook 'ruby-mode-hook
	  (lambda ()
	    (define-key ruby-mode-map "\C-c#" 'comment-or-uncomment-region)))

(defadvice comment-or-uncomment-region (before slick-comment activate compile)
  "When called interactively with no active region, comment a single line instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (line-beginning-position)
	   (line-beginning-position 2)))))

(add-hook 'ruby-mode-hook
	  (lambda () (run-hooks 'jdf-code-modes-hook)))

; ---- rbenv stuff
;; Setting rbenv path
(setenv "PATH"
  (concat
   (getenv "HOME") "/.rbenv/shims:"
   (getenv "HOME") "/.rbenv/bin:"
   (getenv "PATH")))
(setq exec-path
      (cons (concat (getenv "HOME") "/.rbenv/shims")
	    (cons (concat (getenv "HOME") "/.rbenv/bin")
		  exec-path)))

;; ---- Mode Compile (used by ruby-mode)

(autoload 'mode-compile "mode-compile"
 "Command to compile current buffer file based on the major mode" t)
(global-set-key "\C-cc" 'mode-compile)
(autoload 'mode-compile-kill "mode-compile"
 "Command to kill a compilation launched by `mode-compile'" t)
(global-set-key "\C-ck" 'mode-compile-kill)

;; -------- YASnippets ----------

(require 'yasnippet)
(yas/initialize)
(setq yas/root-directory '("~/.emacs.d/mysnippets"
                           "~/.emacs.d/elpa/yasnippet-0.6.1/snippets"))
(mapc 'yas/load-directory yas/root-directory)

;; -------- File Extensions --------

(setq auto-mode-alist (append
		       '(("\\.ss$" . scheme-mode)
			 ("\\.nw$" . noweb-mode)
			 ("\\.pl$" . perl-mode)
			 ("\\.is$" . scheme-mode)
			 ("\\.sw$" . scheme-mode)
			 ("\\.C$" . c++-mode)
			 ("\\.h$" . c++-mode)
			 ("\\.java$" . java-mode)
			 ("\\.pizza$" . java-mode)
			 ("\\.html$" . html-mode)
			 ("\\.tex$" . latex-mode)
			 ("\\.latte$" . latte-mode)
			 ("\\.css$" . css-mode)
			 ("\\.m$" . matlab-mode)
			 ("\\.md$" . markdown-mode)
			 ("\\.rb$" . ruby-mode)
			 ("^Gemfile$" . ruby-mode)
			 ("^Rakefile$" . ruby-mode)
			 ("\\.rake$" . ruby-mode)
			 ("\\.rhtml$" . html-mode)
			 )
		       auto-mode-alist))

(setq completion-ignored-extensions
      (append '(".so" ".class" ".aux" ".log" ".dvi" ".ps")
	      completion-ignored-extensions))

;; ---- ispell
(setq-default ispell-program-name "aspell")

;; ---- based on suggestions from https://github.com/avdi/.emacs24.d
;; save the configuration directory (not portable!)
(setq jdf-emacs-config-dir "/Users/jdfrens/.emacs.d")

(setq user-emacs-directory jdf-emacs-config-dir)

(setq backup-directory-alist
      (list (cons "." (expand-file-name "backup" user-emacs-directory))))

;; Set up 'custom' system
(setq custom-file (expand-file-name "emacs-customizations.el" jdf-emacs-config-dir))
(load custom-file)
