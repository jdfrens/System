;;You may use this file as specified under the GNU General Public License
;; .gnuemacs file 

;; Original author:
;;   Erik Hilsdale (eh@acm.org)
;; Modified heavily for personal use at IU by
;;   Jeremy D. Frens (jdfrens@acm.org)
;; Modified heavily for RedHat Linux at NWC by
;;   Jeremy D. Frens (jdfrens@acm.org)

;; For anyone who would "steal" this file...
;;
;; + This file is loaded by the .emacs file.  This is to allow me to
;;   have different settings for GNU emacs and Xemacs.
;;
;; + Many visual setting for emacs under X Windows are set in
;;   .Xdefaults.  Check that file for my preferred settings.
;; 
;; + There are many definitions here that may be of use only to
;;   myself.  I have placed the word "OPTIONAL" (without quotes, in
;;   all caps) in a comment before these definitions.  You're free to
;;   do with them as you want.
;;
;; + There are several things in this file that makes emacs behave
;;   different from the norm.  Turning off C-h as the help hey is
;;   fairly standard since C-h is all too often backsapce, so I
;;   wouldn't worry too much about that.  However, I have instead
;;   mapped M-h to be the help key instead.  I've tried to note these
;;   non-standard changes by the word "NONSTANDARD".  If you use this
;;   file, you may want to take note of these nonstandard changes I've
;;   made so that instructions you read will make sense.
;;
;; + The word "TODO" represents something I still need to do.
;;

;; NONSTANDARD
;; To prevent emacs from immediately dying if I accidentally hit C-x C-c
;; with all of my files saved.
(setq kill-emacs-query-functions
      (cons (lambda () (yes-or-no-p "Really kill Emacs? "))
	    kill-emacs-query-functions))

;; -------- Set the Load Path --------

(add-to-list 'load-path "~/.emacs.d/icicles/")
(add-to-list 'load-path "~/.emacs.d/elpa/")
(add-to-list 'load-path "~/.emacs.d/")

;; -------- ELPA --------
(load "package")
(package-initialize)

;; -------- Global Defaults and Preferences --------

;; ---- key bindings

(setq function-keymap function-key-map)		; for backwards-compatability

(global-set-key "\C-t" 'tab-to-tab-stop)	; C-T tabs even in lisp mode

;; NONSTANDARD, but incredibly useful
(global-set-key "\C-\\" 'call-last-kbd-macro)

;; NONSTANDARD
;; M-g is by default a useless set-face command.
(global-set-key "\M-g" 'goto-line)

;; ---- general preferences

(setq auto-save-interval 1000)			; don't autosave as often.

(show-paren-mode 1)                             ; how are matching
						; parens indicated?

(setq inhibit-startup-message t)		; don't tell me about emacs.

(setq display-time-day-and-date t)
(display-time)					; display the time on modeline

(fset 'yes-or-no-p (symbol-function 'y-or-n-p))	; y/n, not yes/no

(put 'capitalize-region 'disabled t)		; disable dangerous commands
(put 'downcase-region   'disabled t)
(put 'upcase-region     'disabled t)
(put 'eval-expression   'disabled nil)		; and enable useful ones
(put 'zap-to-char       'disabled nil)

;; -------- Mode Hooks and Program Variables --------

;; OPTIONAL: if you don't use a particular program (like noweb), you
;; can safely remove the settings from that program's section.

; ---- Man mode

(setq manual-program "/usr/bin/man")

; ---- C mode

; ---- CSS mode
(autoload 'css-mode "css-mode")

; ---- Haskell mode


; ---- R (statistics) mode

(add-to-list 'load-path "~/.emacs.d/ess-5.13/lisp/")
(require 'ess-site)

; ---- Text mode

(add-hook 'text-mode-hook 
	  (function 
	   (lambda () 
	     (auto-fill-mode t)			; always auto-fill
	     (setq fill-column 70) )))		; and fill at column 65

(setq initial-major-mode 'text-mode)		; start in text mode...

; ---- Java

;; originally stolen from Jonathan Sobel (jsobel@cs.indiana.edu)
(add-hook 'java-mode-hook 'my-java-mode-hook)
(defun my-java-mode-hook ()
  ; (c-set-style "java")
  (setq c-basic-offset 2)
  ;; html-insert-matching-tag defined below
  (local-set-key "\C-c]" 'html-insert-matching-tag)
  )

; ---- Matlab
(autoload 'matlab-mode "matlab" "Enter Matlab mode." t)
(setq auto-mode-alist (cons '("\\.m$" . matlab-mode) auto-mode-alist))
(defun my-matlab-mode-hook ()
  (setq matlab-function-indent t)	; if you want function bodies indented
  (setq fill-column 76)		; where auto-fill should wrap
  (turn-on-auto-fill))
(add-hook 'matlab-mode-hook 'my-matlab-mode-hook)

; ---- Markdown
; http://jblevins.org/projects/markdown-mode/
(autoload 'markdown-mode "markdown-mode.el"
  "Major mode for editing Markdown files" t)

;; ---- Ruby
(autoload 'ruby-mode "ruby-mode" "Major mode for editing ruby scripts." t)

(require 'rvm)
(rvm-use-default)

;; ---- Mode Compile (used by ruby-mode)

(autoload 'mode-compile "mode-compile"
 "Command to compile current buffer file based on the major mode" t)
(global-set-key "\C-cc" 'mode-compile)
(autoload 'mode-compile-kill "mode-compile"
 "Command to kill a compilation launched by `mode-compile'" t)
(global-set-key "\C-ck" 'mode-compile-kill)

;; -------- YASnippets ----------

(add-to-list 'load-path "~/.emacs.d/yasnippet-0.6.1c")
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.emacs.d/yasnippet-0.6.1c/snippets")

;; -------- File Extensions --------

(setq auto-mode-alist (append 
		       '(("\\.ss$" . scheme-mode) 
			 ("\\.nw$" . noweb-mode)
			 ("\\.pl$" . perl-mode)
			 ("\\.is$" . scheme-mode)
			 ("\\.sw$" . scheme-mode)
			 ("\\.C$" . c++-mode)
			 ("\\.h$" . c++-mode)
			 ("\\.java$" . java-mode)
			 ("\\.pizza$" . java-mode)
			 ("\\.html$" . html-mode)
			 ("\\.tex$" . latex-mode)
			 ("\\.latte$" . latte-mode)
			 ("\\.css$" . css-mode)
			 ("\\.md$" . markdown-mode)
			 ("\\.rb$" . ruby-mode)
			 ("\\.rhtml$" . html-mode)
			 ("^Rakefile$" . ruby-mode)
			 ("\\.rake$" . ruby-mode)
			 )
		       auto-mode-alist))

(setq completion-ignored-extensions 
      (append '(".so" ".class" ".aux" ".log" ".dvi" ".ps")
	      completion-ignored-extensions))


;; ---- Fuzzy finding
(require 'fuzzy-find-in-project)

;; ---- Ack
(defun ack-in-project (pattern)
  "Run ack, with user-specified ARGS, and collect output in a buffer.
While ack runs asynchronously, you can use the \\[next-error] command to
find the text that ack hits refer to. The command actually run is
defined by the ack-command variable."
  (interactive (list (read-string "Ack for (in app root): " (thing-at-point 'symbol))))
 
  (let (compile-command
        (compilation-error-regexp-alist grep-regexp-alist)
        (compilation-directory default-directory)
        (ack-full-buffer-name (concat "*ack-" pattern "*")))

    ;; lambda defined here since compilation-start expects to call a function to get the buffer name
    (compilation-start (concat ack-command " -i  --noheading --nocolor " pattern " ~/Code/reznor/") 'ack-mode
                       (when ack-use-search-in-buffer-name
                         (function (lambda (ignore)
                                     ack-full-buffer-name)))
                       (regexp-quote pattern))))

(global-set-key "\C-cfa" 'ack-in-project)
