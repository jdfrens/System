require 'autotest/redgreen'
require 'autotest/timestamp'

module Autotest::Growl
  # save the name of the working directory (e.g., the app name)
  # to be used as a key to identify this particular run of autotest
  # so the same growl notification will be reused for updates,
  # instead of a new growl window for every posting.
  @@current_directory_name = Dir.pwd.match(/([^\/]+)\z/).to_s
  def self.growl(title, msg, img, pri=0)
    title += " in #{@@current_directory_name}"
    msg += " at #{Time.now}"
    system "growlnotify -n autotest --image #{img} -p #{pri} -m #{msg.inspect} #{title}"
  end

  def self.growl_pass()
    growl "Tests Passed", "Tests passed", "#{IMAGE_ROOT}/pass.png"
  end

  def self.growl_pending(count)
    growl "Tests Pending", "#{count} tests pending", "#{IMAGE_ROOT}/pending.png"
  end

  def self.growl_fail(count, scale)
    growl "Tests Failed", "#{count} tests failed", "#{IMAGE_ROOT}/fail#{scale}.png"
  end

  IMAGE_ROOT = "~/.autotest_images/smileys"

  Autotest.add_hook :initialize do  |at|
    growl "autotest initializing", "Started", "#{IMAGE_ROOT}/pass.png"
  end

  Autotest.add_hook :reset do |at|
    growl "autotest resetting", "Reset", "#{IMAGE_ROOT}/pass.png"
  end

  Autotest.add_hook :quit do |at|
    growl "autotest quitting", "Quit!", "#{IMAGE_ROOT}/fail.png"
  end

  Autotest.add_hook :ran_command do |at|
    m = /(\d+).*examples?.*(\d+).*failures?(.*(\d+).*pending)?/.match(at.results.last)
    if m
      failure_count, pending_count = m[2].to_i, m[4].to_i
      if failure_count != 0
        scale = [(9 + failure_count) / 10 * 10, 50].min
        growl_fail failure_count, scale
      elsif pending_count != 0
        growl_pending pending_count
      else
        growl_pass
      end
    end
  end




  Autotest.add_hook :initialize do |at|
    %w{.hg .git .svn config test nbproject stories log vendor public script db Rakefile Capfile README spec/spec.opts spec/rcov.opts autotest svn-commit .DS_Store }.each do |exception|
      at.add_exception(exception)
    end
  end
end
